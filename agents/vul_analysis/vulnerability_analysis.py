"""
漏洞原因分析器 - 第二阶段
负责深入分析漏洞的技术原理、代码层面的问题和修复方案
"""

import os
from smolagents import (
    WebTools,
    CodeAgent,
    GitHubTools,
)

class VulnerabilityAnalyzer:
    """漏洞原因分析器"""
    
    def __init__(self, model, max_steps=30):
        self.model = model
        self.max_steps = max_steps
        self.agent = self._create_agent()
    
    def _create_agent(self):
        """创建专门用于漏洞技术分析的agent"""
        
        # 基础工具
        web_tools = WebTools(model=self.model, text_limit=100000, search_engine="duckduckgo")
        
        # 尝试添加GitHub工具
        try:
            github_token = os.getenv("GITHUB_TOKEN")
            if github_token:
                github_tools = GitHubTools(github_token)
        except Exception as e:
            print(f"⚠️ GitHub工具初始化失败: {e}")
        
        agent = CodeAgent(
            model=self.model,
            tools=web_tools.tools+github_tools.tools,
            max_steps=self.max_steps,
            additional_authorized_imports=["*"],
            verbosity_level=2,
            planning_interval=8,
            name="vulnerability_analyzer",
            description="""漏洞分析专家，具备深厚的安全技术功底，能够理解复杂的技术细节,专门负责漏洞的技术分析, 能够深入分析漏洞的技术原理，包括但不限于：
            
            1. 漏洞的根本原因和触发机制
            2. 代码层面的缺陷分析
            3. 攻击向量和利用条件
            4. 缓解措施分析
            5. 修复代码分析
            6. 相关漏洞的对比研究
            """,
        )
        
        return agent
    
    def run(self, task):
        """执行漏洞技术分析任务"""
        print(f"🔬 开始分析漏洞技术原理...")
        
        enhanced_task = f"""
{task}

---

注意事项：
1. 在对漏洞做技术原理分析时，不要对产生漏洞的相关代码片段以及补丁修复代码片段做精简，要如实输出
2. 在对漏洞做技术原理分析时，不要采用总结的表述方式，要对其进行深入细致的分析并详细输出分析过程

请按照以下markdown结构输出技术分析结果：

## 漏洞分析
根据搜集到的信息，总结漏洞的成因及技术原理
### 技术原理
根据漏洞产生的代码，分析漏洞的具体技术原理，需要附带漏洞相关的代码块，如果有补丁或修复代码，则需要对修复代码进行分析，检查修复是否完善
### 排查指导
根据漏洞产生的原理，给出排查指导，要列出具体的排查步骤，需要包含多种排查方法，如：
1. 根据漏洞组件版本进行排查
2. 根据触发漏洞的现象进行排查，构造简单的检测脚本
### 缓解措施
根据漏洞的成因及技术原理，给出缓解措施，需要列出具体的缓解措施执行步骤
### 参考链接
给出获得上述事实的参考链接
1. 
2. 
...
n. 

"""
        
        result = self.agent.run(enhanced_task)
        return result
