"""
漏洞原因分析器 - 第二阶段
负责深入分析漏洞的技术原理、代码层面的问题和修复方案
"""

import os
from smolagents import (
    WebTools,
    MemoryCompressedCodeAgent,
    GitHubTools,
)

class VulnerabilityAnalyzer:
    """漏洞原因分析器"""
    
    def __init__(self, model, max_steps=30, search_engine="duckduckgo"):
        self.model = model
        self.max_steps = max_steps
        self.search_engine = search_engine
        self.agent = self._create_agent()
    
    def _create_agent(self):
        """创建专门用于漏洞技术分析的agent"""
        
        # 基础工具
        web_tools = WebTools(model=self.model, text_limit=100000, search_engine=self.search_engine)
        
        # 尝试添加GitHub工具
        try:
            github_token = os.getenv("GITHUB_TOKEN")
            if github_token:
                github_tools = GitHubTools(github_token)
        except Exception as e:
            print(f"⚠️ GitHub工具初始化失败: {e}")
        
        agent = MemoryCompressedCodeAgent(
            model=self.model,
            tools=web_tools.tools+github_tools.tools,
            max_steps=self.max_steps,
            additional_authorized_imports=["*"],
            verbosity_level=2,
            planning_interval=6,
            name="vulnerability_analyzer",
            description="""漏洞分析专家，具备深厚的安全技术功底，能够理解复杂的技术细节,专门负责漏洞的技术分析, 能够深入分析漏洞的技术原理，包括但不限于：
            
            1. 漏洞的根本原因和触发机制
            2. 代码层面的缺陷分析
            3. 攻击向量和利用条件
            4. 缓解措施分析
            5. 修复代码分析
            6. 相关漏洞的对比研究
            """,
        )
        
        return agent
    
    def run(self, task):
        """执行漏洞技术分析任务"""
        print(f"🔬 开始分析漏洞技术原理...")
        
        enhanced_task = f"""
{task}

---

深度分析要求：
1. **源码级分析**：
   - 首先从NVD、官方公告等处查找漏洞相关的commit信息，分析其是否为修复补丁
   - 若从互联往中找不到相关commit信息，则查看漏洞版本和修复版本之间的所有commit，找出与漏洞相关的commit
   - 基于真实的漏洞代码和修复补丁进行原理分析
   - 完整输出关键代码片段，不要省略或总结
   - 详细解释每行代码的作用和问题所在
   
2. **技术细节深挖**：
   - 深入分析数据流、控制流和时序关系
   - 关注边界条件、异常处理、并发控制等细节
   - 分析漏洞在不同场景下的表现差异
   
3. **修复方案验证**：
   - 对比修复前后的代码差异
   - 分析修复方案的完整性和有效性
   - 考虑是否存在绕过修复的可能性
   
4. **实际利用场景**：
   - 分析真实攻击场景中的利用条件
   - 考虑不同环境下的利用难度和影响
   - 关注与其他安全机制的交互

注意事项：
- 首先尝试从NVD、官方公告等处查找漏洞相关的commit信息，分析其是否为修复补丁
- 尝试使用`visit_page`通过url访问github源码时，要使用raw链接，例如：要访问`https://github.com/containerd/containerd/blob/v2.1.0/pkg/archive/tar.go`，实际应该访问`https://raw.githubusercontent.com/containerd/containerd/v2.1.0/pkg/archive/tar.go`

请按照以下markdown结构输出技术分析结果：

## 漏洞分析
根据搜集到的信息，总结漏洞的成因及技术原理

### 技术原理
#### 深度源码分析
包括但不限于以下分析要点：
- 完整展示漏洞相关的源代码（不要省略）
- 逐行分析代码逻辑和问题所在
- 详细说明漏洞触发的条件和时机
- 分析数据流和控制流的异常路径

#### 修复代码分析
包括但不限于以下分析要点：
- 展示完整的修复补丁代码
- 对比修复前后的关键差异
- 分析修复方案的技术原理
- 评估修复的完整性和有效性

### 漏洞触发机制
详细分析漏洞的触发条件、时序要求和环境依赖：
- 具体的触发步骤和操作序列
- 关键的时间窗口和竞争条件
- 环境配置和系统状态要求

### 排查指导
根据漏洞产生的原理，给出排查指导，要列出具体的排查步骤，需要包含多种排查方法，如：
1. 根据漏洞组件版本进行排查
2. 根据触发漏洞的现象进行排查，构造简单的检测脚本

### 缓解措施
根据漏洞的成因及技术原理，给出缓解措施，需要列出具体的缓解措施执行步骤

### 参考链接
给出获得上述事实的参考链接，特别是源码和补丁链接
1. 
2. 
...
n. 

"""
        
        result = self.agent.run(enhanced_task)
        return result
