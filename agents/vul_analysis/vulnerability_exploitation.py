"""
漏洞利用分析器 - 第三阶段
负责分析漏洞的利用方法、环境搭建和防护绕过技术
"""

import os
from smolagents import (
    CodeAgent,
    ToolCallingAgent,
    GitHubTools,
    WebTools,
)


class VulnerabilityExploiter:
    """漏洞利用分析器"""
    
    def __init__(self, model, max_steps=30, search_engine="duckduckgo"):
        self.model = model
        self.max_steps = max_steps
        self.search_engine = search_engine
        self.agent = self._create_agent()
    
    def _create_agent(self):
        """创建专门用于漏洞利用分析的agent"""
        
        web_tools = WebTools(model=self.model, text_limit=100000, search_engine=self.search_engine)
        
        # 尝试添加GitHub工具
        try:
            github_token = os.getenv("GITHUB_TOKEN")
            if github_token:
                github_tools = GitHubTools(github_token)
                print(f"✅ 已添加 {len(github_tools.tools)} 个GitHub工具")
        except Exception as e:
            print(f"⚠️ GitHub工具初始化失败: {e}")
        
        agent = ToolCallingAgent(
            model=self.model,
            tools=web_tools.tools+github_tools.tools,
            max_steps=self.max_steps,
            #additional_authorized_imports=["*"],
            verbosity_level=2,
            planning_interval=6,
            name="vulnerability_exploiter",
            description="""漏洞利用专家，了解各种漏洞的利用方法，包括但不限于内核漏洞、应用中间件漏洞、web漏洞、云原生漏洞等等，可根据提供的漏洞信息分析出利用方法。
            
            能力包括但不限于：
            1. 漏洞环境的搭建配置
            2. 概念验证代码（POC）的开发
            3. 详细的复现步骤指导
            """,
        )

        return agent
    
    def run(self, task):
        """执行漏洞利用分析任务"""
        print(f"⚔️ 开始分析漏洞利用方法...")
        
        enhanced_task = f"""
{task}

---

关键要求：
1. **深度技术分析**：不仅要理解漏洞原理，更要深入分析具体的实现细节和触发时机
2. **精确POC构造**：
   - 首先从互联网上查找是否存在公开的POC代码
   - 仔细研究现有的POC实现，理解其精确的实现逻辑
   - 关注操作顺序、时序关系和数据结构的具体细节
   - 对于竞争条件类漏洞，要特别关注触发时机和操作序列
   - 提供完整的、可直接运行的POC代码，而非概念性描述
   - POC非原理性验证，而要能够在该漏洞软件版本中成功触发漏洞
3. **可执行代码**：提供完整的、可直接运行的POC代码，而非概念性描述
4. **实战导向**：确保POC在真实环境中能够成功利用，包含完整的测试验证
5. **无需执行**：本阶段只生成POC，无需真正执行，但内容要足够详细可供下游验证代理执行并验证

POC开发要求：
- POC开发分两个部分，一个是漏洞复现环境搭建dockerfile，一个是POC代码，要保证复现环境功能正常，POC代码能够在复现环境中复现漏洞
- 提供完整的源代码，包含所有必要的依赖和配置
- 详细说明每一步操作的技术原理和作用
- 包含错误处理和成功验证的逻辑

注意事项：
- 尝试使用`visit_page`通过url访问github源码时，要使用raw链接，例如：要访问`https://github.com/containerd/containerd/blob/v2.1.0/pkg/archive/tar.go`，实际应该访问`https://raw.githubusercontent.com/containerd/containerd/v2.1.0/pkg/archive/tar.go`
- 要善于使用前面阶段的分析结果，特别是参考链接，不要重复搜索

请按照以下markdown结构输出利用分析结果：

## 漏洞复现
描述复现漏洞的整体思路

### 复现环境
详细列出搭建复现环境的步骤，包含完整的dockerfile和配置文件

### POC实现
根据深度技术分析，提供完整可执行的POC代码：
- 完整的源代码实现
- 详细的操作步骤说明（包括复现环境的启动，POC代码的执行等）
- 关键技术点的解释
- 成功验证的方法

### 利用效果验证
说明如何验证POC的成功执行和利用效果

### 参考链接
给出获得上述事实的参考链接
1. 
2. 
...
n. 

"""
        
        result = self.agent.run(enhanced_task)
        return result
