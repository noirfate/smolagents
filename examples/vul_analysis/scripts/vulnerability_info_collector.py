"""
漏洞信息收集器 - 第一阶段
负责收集漏洞的基础信息，包括CVE详情、CVSS评分、受影响组件等
"""

import os
from smolagents import (
    DuckDuckGoSearchTool,
    CodeAgent,
)

try:
    from scripts.text_web_browser import (
        ArchiveSearchTool,
        FinderTool,
        FindNextTool,
        PageDownTool,
        PageUpTool,
        SimpleTextBrowser,
        VisitTool,
    )
    from scripts.text_inspector_tool import TextInspectorTool
except ImportError:
    # 如果没有这些工具，使用基础工具
    print("⚠️ 高级浏览器工具未找到，使用基础搜索功能")
    ArchiveSearchTool = None
    SimpleTextBrowser = None


class VulnerabilityInfoCollector:
    """漏洞信息收集器"""
    
    def __init__(self, model, max_steps=30):
        self.model = model
        self.max_steps = max_steps
        self.agent = self._create_agent()
    
    def _create_agent(self):
        """创建专门用于漏洞信息收集的agent"""
        
        # 基础工具
        tools = [DuckDuckGoSearchTool()]
        
        # 尝试添加高级浏览器工具
        if SimpleTextBrowser and ArchiveSearchTool:
            try:
                user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
                browser_config = {
                    "viewport_size": 1024 * 5,
                    "downloads_folder": "downloads",
                    "request_kwargs": {
                        "headers": {"User-Agent": user_agent},
                        "timeout": 300,
                    },
                    "serpapi_key": os.getenv("SERPAPI_API_KEY"),
                    "use_browser_for_text": True,
                }
                
                os.makedirs("./downloads", exist_ok=True)
                browser = SimpleTextBrowser(**browser_config)
                
                tools.extend([
                    VisitTool(browser),
                    PageUpTool(browser),
                    PageDownTool(browser),
                    FinderTool(browser),
                    FindNextTool(browser),
                    ArchiveSearchTool(browser),
                ])
                
                if TextInspectorTool:
                    tools.append(TextInspectorTool(self.model, 100000))
                    
            except Exception as e:
                print(f"⚠️ 高级浏览器工具初始化失败: {e}")
        
        agent = CodeAgent(
            model=self.model,
            tools=tools,
            max_steps=self.max_steps,
            additional_authorized_imports=["*"],
            verbosity_level=2,
            planning_interval=4,
            name="vulnerability_info_collector",
            description="""漏洞信息收集专家，专门负责从互联网上收集漏洞信息，给它一个漏洞CVE编号即可完成相关的信息收集工作，可收集的信息包括但不限于：
            
            1. CVE编号和官方描述
            2. CVSS评分和严重程度评级
            3. 漏洞类型和分类
            4. 受影响的软件和版本范围
            5. 修复版本和补丁信息
            6. 漏洞发现和披露时间线
            7. 相关的安全公告和参考链接
            8. 排查和检测指导
            9. 风险和影响评估
            
            """,
        )
        
        return agent
    
    def run(self, task):
        """执行漏洞信息收集任务"""
        print(f"🔍 开始收集漏洞信息...")
        
        enhanced_task = f"""
{task}

---

注意事项：
1. 请确保信息的准确性和完整性，优先查找官方来源
2. 提供数据来源链接
3. 交叉验证多个来源的信息，保证信息的准确性、完整性和时效性
4. 以markdown格式输出

请按照以下结构输出结果：

## 基础信息
### 漏洞处置优先级
综合处置优先级：**优先级**（根据漏洞的严重程度、公开程度、利用条件、交互要求等综合评估，可选值为低、中、高）

| 类目             | 值                                          |
|------------------|--------------------------------------------------|
| CVE编号          | 漏洞的CVE编号 |
| CVSS评分          | 漏洞的CVSS评分 |
| 漏洞类型          |  漏洞所属的CWE类型 |
| 公开程度          |  漏洞的公开程度为公开或半公开，如果存在公开的漏洞利用或分析文章则为公开，否则为半公开 |
| 利用条件          |  触发漏洞需要的前置条件，比如需要具备一定权限等等 |
| 交互要求          |  触发漏洞是否需要用户交互，需要或不需要 |

### 漏洞描述
根据漏洞公告及从互联网上收集的信息对漏洞进行准确的描述

### 影响版本
漏洞影响的组件及其影响版本范围

### 修复版本
漏洞的修复版本

### 参考链接
给出获得上述事实的参考链接
1. 
2. 
...
n. 

"""
        
        result = self.agent.run(enhanced_task)
        return result
