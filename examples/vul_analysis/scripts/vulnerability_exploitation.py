"""
漏洞利用分析器 - 第三阶段
负责分析漏洞的利用方法、环境搭建和防护绕过技术
"""

import os
from smolagents import (
    DuckDuckGoSearchTool,
    CodeAgent,
    GitHubTools,
)

try:
    from scripts.text_web_browser import (
        ArchiveSearchTool,
        FinderTool,
        FindNextTool,
        PageDownTool,
        PageUpTool,
        SimpleTextBrowser,
        VisitTool,
    )
    from scripts.text_inspector_tool import TextInspectorTool
except ImportError:
    print("⚠️ 高级浏览器工具未找到，使用基础搜索功能")
    ArchiveSearchTool = None
    SimpleTextBrowser = None


class VulnerabilityExploiter:
    """漏洞利用分析器"""
    
    def __init__(self, model, max_steps=30):
        self.model = model
        self.max_steps = max_steps
        self.agent = self._create_agent()
    
    def _create_agent(self):
        """创建专门用于漏洞利用分析的agent"""
        
        # 基础工具
        tools = [DuckDuckGoSearchTool()]
        
        # 尝试添加高级浏览器工具
        if SimpleTextBrowser and ArchiveSearchTool:
            try:
                user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
                browser_config = {
                    "viewport_size": 1024 * 5,
                    "downloads_folder": "downloads",
                    "request_kwargs": {
                        "headers": {"User-Agent": user_agent},
                        "timeout": 300,
                    },
                    "serpapi_key": os.getenv("SERPAPI_API_KEY"),
                    "use_browser_for_text": True,
                }
                
                os.makedirs("./downloads", exist_ok=True)
                browser = SimpleTextBrowser(**browser_config)
                
                tools.extend([
                    VisitTool(browser),
                    PageUpTool(browser),
                    PageDownTool(browser),
                    FinderTool(browser),
                    FindNextTool(browser),
                    ArchiveSearchTool(browser),
                ])
                
                if TextInspectorTool:
                    tools.append(TextInspectorTool(self.model, 100000))
                    
            except Exception as e:
                print(f"⚠️ 高级浏览器工具初始化失败: {e}")
        
        # 尝试添加GitHub工具
        try:
            github_token = os.getenv("GITHUB_TOKEN")
            if github_token:
                github_tools = GitHubTools(github_token)
                tools.extend(github_tools.tools)
        except Exception as e:
            print(f"⚠️ GitHub工具初始化失败: {e}")
        
        agent = CodeAgent(
            model=self.model,
            tools=tools,
            max_steps=self.max_steps,
            additional_authorized_imports=["*"],
            verbosity_level=2,
            planning_interval=4,
            name="vulnerability_exploiter",
            description="""漏洞利用专家，了解各种漏洞的利用方法，包括但不限于内核漏洞、应用中间件漏洞、web漏洞、云原生漏洞等等，可根据提供的漏洞信息分析出利用方法。
            
            能力包括但不限于：
            1. 漏洞环境的搭建配置
            2. 概念验证代码（POC）的开发
            3. 详细的复现步骤指导
            """,
        )

        return agent
    
    def run(self, task):
        """执行漏洞利用分析任务"""
        print(f"⚔️ 开始分析漏洞利用方法...")
        
        enhanced_task = f"""
{task}

---

注意事项：
1. 如果网络上存在漏洞利用POC，则分析其实现是否正确，如正确则采用
2. 通过互联网搜索受影响组件的使用方法，构造真实准确的漏洞复现环境，确保漏洞能够被触发
3. 构造漏洞利用POC，在漏洞环境复现中实现对漏洞的利用
4. 给出参考链接

请按照以下markdown结构输出利用分析结果：

## 漏洞复现
描述复现漏洞的思路
### 复现环境
详细列出搭建复现环境的步骤，并输出dockerfile
### 验证POC
根据漏洞原理及复现环境，输出漏洞利用POC，能够在复现环境上成功完成对漏洞的利用
### 参考链接
给出获得上述事实的参考链接
1. 
2. 
...
n. 

"""
        
        result = self.agent.run(enhanced_task)
        return result
